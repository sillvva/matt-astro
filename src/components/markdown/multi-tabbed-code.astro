---
import { cn } from "$/util";
import crypto from "node:crypto";

const tabs: string[] = [];
const panels: string[] = [];

let inlineStyles = "";

{
	let index = 0;
	const classes: string[] = [];
	Object.entries(Astro.slots).forEach(([name]) => {
		if (name.startsWith("tab")) {
			index += 1;
			tabs.push(name);
			classes.push(`.multi-tabbed:has(.radio-${index}:checked) .panel-${index}`);
			classes.push(`.multi-tabbed:has(.radio-${index}:checked) .copy-${index}`);
		} else if (name.startsWith("panel")) {
			panels.push(name);
		}
	});
	inlineStyles += classes.join(",\n");
}
console.log(panels);
inlineStyles += ` {\n  visibility: visible;\n  display: inline-block;\n}`;

const uid = crypto.randomUUID();
---

<script>
	function copyBlock(el: Element) {
		const idx = el.getAttribute("data-idx");
		const pre: HTMLPreElement | null | undefined = el.parentNode?.parentNode?.querySelector(`.panel-${idx} pre`);
		if (!pre) {
			alert("No code block found to copy");
			return;
		}
		navigator.clipboard.writeText(pre.innerText);
		document.querySelectorAll(".copy").forEach((btn) => {
			btn.innerHTML = "Copy";
			btn.classList.add("bg-gray-700");
			btn.classList.remove("bg-green-700");
		});
		el.innerHTML = "Copied";
		el.classList.remove("bg-gray-700");
		el.classList.add("bg-green-700");
	}

	document.addEventListener("astro:page-load", () => {
		document.querySelectorAll("article .pre-block.multi-tabbed .copy").forEach((btn) => {
			if (btn) btn.addEventListener("click", () => copyBlock(btn));
		});
	});
</script>

<div class="pre-block multi-tabbed group relative mb-4 mt-2 rounded-md border border-base-100 bg-neutral-900 text-base-content">
	<style set:html={inlineStyles}></style>
	<nav
		class={cn("flex items-center rounded-t justify-between gap-4", "border-b border-base-100 bg-neutral-800 p-2 text-sm py-0")}
	>
		<div class="flex flex-1 overflow-x-auto">
			{
				tabs.map(async (name, idx) => {
					const index = idx + 1;
					const render = await Astro.slots.render(name);
					return (
						<label class="code-tab h-[44px] whitespace-nowrap border-t border-primary bg-neutral-900 p-3 text-sm opacity-50 has-[:checked]:opacity-100">
							<input
								class:list={["radio", `radio-${index}`, "tab-selector"]}
								type="radio"
								name={uid}
								checked={name.endsWith("active") || index === 1 ? "" : undefined}
							/>
							<Fragment set:html={render} />
						</label>
					);
				})
			}
		</div>
		{
			tabs.map(async (name, idx) => (
				<button
					class={cn("copy rounded-md bg-gray-700 px-2 py-1 text-sm text-white max-sm:hidden", `copy-${idx + 1}`)}
					data-idx={idx + 1}
					type="button"
				>
					Copy
				</button>
			))
		}
	</nav>
	<div class="panels max-h-[20rem] overflow-y-auto md:max-h-[40rem]">
		{
			panels.map(async (name, index) => (
				<div
					class={cn(
						"max-w-portfolio group m-0 rounded-lg bg-neutral-900",
						"text-sm text-base-content [tab-size:2]",
						name.endsWith("tallest") && "tallest",
						`panel panel-${index + 1}`
					)}
					set:html={await Astro.slots.render(name)}
				/>
			))
		}
	</div>
</div>
