@use "sass:math";

@mixin code() {
	.code-block {
		pre {
			position: relative;
			tab-size: 2;
			line-height: 1.25rem;
			background-color: rgb(23 23 23 / 1) !important;
			code {
				&:has(.line.diff) {
					.line:not(.diff) {
						padding-left: theme("space.4");
					}
				}
				&:has(.line.focused) {
					.line:not(.focused) {
						opacity: 0.5;
						filter: blur(0.095rem);
					}
				}
				.line {
					display: inline-block;
					width: theme("width.full");
					line-height: 1.5;
					&:empty {
						display: none;
					}
					&.highlighted {
						background-color: rgba(255, 255, 255, 0.1);
						&.error {
							background-color: rgba(244, 63, 94, 0.16);
						}
					}
					&.diff {
						top: 3px;
						&::before {
							display: inline-block;
							width: theme("width.4");
							text-align: center;
						}
						&.add {
							background-color: rgba(63, 244, 94, 0.16);
							&:before {
								content: "+";
								color: green;
							}
						}
						&.remove {
							background-color: rgba(244, 63, 94, 0.16);
							&:before {
								content: "-";
								color: red;
							}
						}
					}
					.highlighted-word {
						background-color: rgba(255, 255, 255, 0.1);
						border: 1px solid rgba(255, 255, 255, 0.2);
						padding: 1px 3px;
						margin: -1px -3px;
						border-radius: 4px;
					}
					&.error .highlighted-word {
						background-color: transparent;
						border: 0;
						margin: 0;
						padding: 0;
						border-radius: 0;
						text-decoration: underline;
						text-decoration-style: wavy;
						text-decoration-color: rgb(205, 0, 0);
						@supports (color: color-mix(in srgb, red 80%, black)) {
							text-decoration-color: color-mix(in srgb, red 80%, black);
						}
					}
					&.diff {
						.highlighted-word {
							border: 0;
							padding: 0;
							margin: 0;
							border-radius: 0;
						}
						&.add .highlighted-word {
							background-color: rgba(63, 244, 94, 0.3);
							color: white !important;
						}
						&.remove .highlighted-word {
							background-color: rgba(244, 63, 94, 0.3);
							color: white !important;
						}
					}
				}
			}
		}
	}
}

@function oklch-gray-shade($shade, $opacity: 1) {
	$oklch-values: (
		100: 90%,
		200: 80%,
		300: 70%,
		400: 60%,
		500: 50%,
		600: 40%,
		700: 30%,
		800: 20%,
		900: 10%
	);
	$lightness: map-get(
		$map: $oklch-values,
		$key: $shade
	);
	@return oklch(from gray $lightness 0 h / $opacity);
}

@function oklch-color-shade($color, $shade, $opacity: 1) {
	$oklch-values: (
		100: 97% 0.02,
		200: 89% 0.05,
		300: 80% 0.13,
		400: 71% 0.22,
		500: 60% 0.31,
		600: 49% 0.22,
		700: 38% 0.13,
		800: 25% 0.05,
		900: 12% 0.02
	);
	$values: map-get(
		$map: $oklch-values,
		$key: $shade
	);
	$lightness: nth($values, 1);
	$chroma: nth($values, 2);
	@return oklch(from $color $lightness $chroma h / $opacity);
}

@function rgb-color-shade($color, $shade, $opacity: 1) {
	@if $shade >= 500 {
		$calc: math.div((10 - math.div($shade, 100)), 5);
		@return rgb(from $color calc(r * $calc) calc(g * $calc) calc(b * $calc) / $opacity);
	} @else {
		$calc: math.div((5 - math.div($shade, 100)), 5);
		@return rgb(from $color calc((255 - r) * $calc + r) calc((255 - g) * $calc + g) calc((255 - b) * $calc + b) / $opacity);
	}
}

@function srgb-color-mix($color, $shade) {
	@if $shade >= 500 {
		$percentage: math.percentage(math.div(1000 - $shade, 500));
		@return color-mix(in srgb, $color $percentage, black);
	} @else {
		$percentage: math.percentage(math.div(500 - $shade, 500));
		@return color-mix(in srgb, $color, white $percentage);
	}
}

@mixin alert-box() {
	.alert-box {
		position: relative;
		margin-bottom: 1rem;
		border-radius: 0.25rem;
		border-width: 1px;
		border-style: solid;
		border-color: grey;
		color: grey;
		padding: 1rem;
		padding-left: 3.5rem;

		a {
			color: white !important;
		}
		p {
			margin: 0;
			font-size: 1rem;
			line-height: 1.5rem;
		}

		&.success {
			--color: limegreen;
			&::before {
				--svg: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%23000' d='M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10s10-4.5 10-10S17.5 2 12 2m0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8s8 3.59 8 8s-3.59 8-8 8m4.59-12.42L10 14.17l-2.59-2.58L6 13l4 4l8-8z'/%3E%3C/svg%3E");
			}
		}
		&.error {
			--color: red;
			&::before {
				--svg: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath fill='red' d='M8.27 3L3 8.27v7.46L8.27 21h7.46C17.5 19.24 21 15.73 21 15.73V8.27L15.73 3M9.1 5h5.8L19 9.1v5.8L14.9 19H9.1L5 14.9V9.1m4.12-1.39L7.71 9.12L10.59 12l-2.88 2.88l1.41 1.41L12 13.41l2.88 2.88l1.41-1.41L13.41 12l2.88-2.88l-1.41-1.41L12 10.59'/%3E%3C/svg%3E");
			}
		}
		&.warning {
			--color: gold;
			&::before {
				--svg: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24'%3E%3Cpath d='M12 2L1 21h22M12 6l7.53 13H4.47M11 10v4h2v-4m-2 6v2h2v-2'/%3E%3C/svg%3E");
			}
		}
		&.info {
			--color: deepskyblue;
		}

		&::before {
			content: "";
			position: absolute;
			top: 1rem;
			left: 1rem;
			width: 24px;
			height: 24px;
			background-color: currentColor;
			mask-image: var(
				--svg,
				url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='%23000' d='M11 7v2h2V7zm3 10v-2h-1v-4h-3v2h1v2h-1v2zm8-5c0 5.5-4.5 10-10 10S2 17.5 2 12S6.5 2 12 2s10 4.5 10 10m-2 0c0-4.42-3.58-8-8-8s-8 3.58-8 8s3.58 8 8 8s8-3.58 8-8'/%3E%3C/svg%3E")
			);
			mask-repeat: no-repeat;
			mask-size: 100% 100%;
		}

		@supports (color: oklch(from white l c h)) {
			&:is(&, p):is(&, .oklch) {
				color: oklch-color-shade(var(--color), 200);
				border-color: oklch-color-shade(var(--color), 600);
				background: oklch-color-shade(var(--color), 700);
			}
			&:is(&, .oklch) ::selection {
				color: oklch-color-shade(var(--color), 100);
				background: oklch-color-shade(var(--color), 600);
			}
		}

		@supports (color: rgb(from white r g b)) {
			&:is(&, p):is(&, .rgb) {
				color: rgb-color-shade(var(--color, black), 100);
				border-color: rgb-color-shade(var(--color, black), 700);
				background: rgb-color-shade(var(--color, black), 800);
			}
			&:is(&, .rgb) ::selection {
				color: rgb-color-shade(var(--color, black), 100);
				background: rgb-color-shade(var(--color, black), 600);
			}
		}

		@supports (color: color-mix(in srgb, red 0%, white)) {
			&:is(&, p):is(&, .color-mix) {
				color: srgb-color-mix(var(--color, black), 100);
				border-color: srgb-color-mix(var(--color, black), 700);
				background: srgb-color-mix(var(--color, black), 800);
			}
			&:is(&, .color-mix) ::selection {
				color: srgb-color-mix(var(--color, black), 100);
				background: srgb-color-mix(var(--color, black), 600);
			}
		}
	}
}

@mixin button-row() {
	.button-row {
		display: flex;
		flex-wrap: wrap;
		gap: 1rem;
		padding-bottom: 1rem;
		> p {
			display: contents;
		}
		:is(h3, h4) + & {
			margin-top: 0.5rem;
		}
		@media (max-width: 640px) {
			a {
				flex: 1;
			}
		}
	}
}

@mixin tweets() {
	.tweet div {
		overflow: hidden;
		border-radius: 0.8rem;
	}

	.tweet-block {
		display: flex;
		gap: 1rem;
		> :first-child {
			flex: 1;
			min-width: 0;
			.button-row:not(:has(a:not([data-istweet]))) {
				@apply md:hidden;
			}
			.button-row a[data-istweet] {
				@apply md:hidden;
			}
		}
		> :last-child {
			@apply max-md:hidden;
			width: 300px;
			> * {
				flex: 1;
			}
		}
	}

	.button-row {
		@media (max-width: 640px) {
			&:has(a[data-istweet]) {
				a:not([data-istweet]) {
					flex-basis: 100%;
				}
			}
		}
	}
}
