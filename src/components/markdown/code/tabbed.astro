---
import { cn } from "$/util";
import CodeBlock from "./block/block.astro";
import CodeNav from "./block/nav.astro";

const uuid = crypto.randomUUID();
const tabs: string[] = [];
const panels: string[] = [];

let index = 0;
const classes: string[] = [];
Object.entries(Astro.slots).forEach(([name]) => {
	if (name.startsWith("tab")) {
		index += 1;
		tabs.push(name);
		classes.push(`.tabbed:has(.radio-${index}:checked) .panel-${index}`);
		classes.push(`.tabbed:has(.radio-${index}:checked) .copy-${index}`);
	} else if (name.startsWith("panel")) {
		panels.push(name);
	}
});

const inlineStyles = classes.join(", ") + " { visibility: visible; display: inline-block !important; }";
---

<CodeBlock class="tabbed">
	{tabs.length > 0 && <style set:html={inlineStyles} />}
	<CodeNav {tabs}>
		<div class="flex flex-1 overflow-x-auto">
			{
				tabs.map(async (name, idx) => {
					const index = idx + 1;
					const render = await Astro.slots.render(name);
					return (
						<label>
							<input class={`radio-${index}`} type="radio" name={uuid} checked={index === 1 ? "" : undefined} />
							<Fragment set:html={render} />
						</label>
					);
				})
			}
		</div>
	</CodeNav>
	<div class="relative max-h-[20rem] overflow-y-auto md:max-h-[40rem]">
		{
			panels.length ? (
				panels.map(async (name, index) => (
					<div
						class={cn(`panel-${index + 1}`, "m-0 hidden w-full rounded bg-neutral-900 text-sm text-neutral-content")}
						set:html={await Astro.slots.render(name)}
					/>
				))
			) : (
				<div class="panel-0 m-0 w-full rounded bg-neutral-900 text-sm text-neutral-content">
					<slot />
				</div>
			)
		}
	</div>
</CodeBlock>
