---
import { cn } from "$/util";

export interface Item {
	link: string;
	label: string;
	active?: boolean;
	itemColor?: string;
	hoverColor?: string;
	labelColor?: string;
}

interface Props {
	pathname: string;
	items: (Item | null)[];
	maxLength: number;
	rotated: boolean;
	classes: string[];
	itemClasses?: string[];
	itemColor?: string;
	hoverColor?: string;
	hexagonClasses?: string[];
	labelClasses?: string[];
	labelColor?: string;
	bgColor?: string;
}

const {
	items,
	pathname,
	maxLength = 0,
	rotated = false,
	classes = [],
	itemClasses = [],
	itemColor = "rgb(0, 0, 0)",
	hoverColor = "rgb(80, 80, 80)",
	hexagonClasses = [],
	labelClasses = [],
	labelColor = "rgb(255, 255, 255)",
	bgColor = "rgb(0, 0, 0)"
} = Astro.props;

let menuRows: Item[][] = [[]];
items.forEach((item, i) => {
	const rowIndex = menuRows.length - 1;
	if (item)
		menuRows[rowIndex].push({
			...item,
			...(item.link === pathname && { active: true })
		});
	else menuRows[rowIndex].push({ link: "", label: "" });
	const rotDiff = !rotated && menuRows.length % 2 === 0 ? 1 : 0;
	if (maxLength >= 0 && menuRows[rowIndex].length === maxLength - rotDiff && items.length - 1 > i) {
		menuRows.push([]);
	}
});

if (!classes.find((c) => c.startsWith("[--scale:"))) {
	classes.push("[--scale:1]");
}
---

<nav class={cn("hex-menu-wrapper", rotated && "rotated", ...classes)} style={{ "--bg-color": bgColor }}>
	{
		menuRows.map((row, r) => (
			<div class={cn("hex-menu-row", r % 2 === 1 && !rotated && "shift")}>
				{row.map((item, i) =>
					item.link ? (
						<a
							href={item.link}
							class={cn("hex-menu-item-container", rotated && "rotated", ...itemClasses)}
							style={{
								"--item-color": item.itemColor || itemColor,
								"--hover-color": item.hoverColor || hoverColor,
								"--label-color": item.labelColor || labelColor
							}}
							aria-label={item.label}
						>
							<svg
								viewBox="0 0 800 800"
								class={cn("hex-menu-item", rotated && "rotated", !item.label && "empty", item.active && "active")}
								aria-hidden={!item.label}
							>
								{rotated ? (
									<g transform="matrix(-6.92 0 0 -6.92 400.24 400.24)">
										<polygon
											class={cn("h-hex", "hex", ...hexagonClasses)}
											points="-19.9,34.5 -39.8,0 -19.9,-34.5 19.9,-34.5 39.8,0 19.9,34.5 "
										/>
									</g>
								) : (
									<g transform="matrix(0 6.92 -6.92 0 400.17 400.33)">
										<polygon
											class={cn("h-hex", "hex", ...hexagonClasses)}
											points="-19.9,34.5 -39.8,0 -19.9,-34.5 19.9,-34.5 39.8,0 19.9,34.5 "
										/>
									</g>
								)}
							</svg>
							<span class={cn("label", ...labelClasses)}>{item.label}</span>
						</a>
					) : (
						<div
							class={cn("hex-menu-item-container", rotated && "rotated", ...itemClasses)}
							style={{
								"--item-color": item.itemColor || itemColor,
								"--hover-color": item.hoverColor || hoverColor,
								"--label-color": item.labelColor || labelColor
							}}
						>
							<svg
								viewBox="0 0 800 800"
								class={cn("hex-menu-item", rotated && "rotated", !item.label && "empty", item.active && "active")}
								aria-hidden={!item.label}
							>
								{rotated ? (
									<g transform="matrix(-6.92 0 0 -6.92 400.24 400.24)">
										<polygon
											class={cn("h-hex hex", ...hexagonClasses)}
											points="-19.9,34.5 -39.8,0 -19.9,-34.5 19.9,-34.5 39.8,0 19.9,34.5 "
										/>
									</g>
								) : (
									<g transform="matrix(0 6.92 -6.92 0 400.17 400.33)">
										<polygon
											class={cn("h-hex hex", ...hexagonClasses)}
											points="-19.9,34.5 -39.8,0 -19.9,-34.5 19.9,-34.5 39.8,0 19.9,34.5 "
										/>
									</g>
								)}
							</svg>
							<span class={cn("label", ...labelClasses)}>{item.label}</span>
						</div>
					)
				)}
			</div>
		))
	}
</nav>

<style lang="scss">
	.hex-menu-wrapper {
		display: inline-block;
		.hex-menu-row {
			height: calc(108px * var(--scale));
			position: relative;
			&.shift {
				margin-left: calc(125px / 2 * var(--scale));
			}
		}
		&.rotated {
			.hex-menu-row {
				height: calc(125px * var(--scale));
			}
		}
	}

	.hex-menu-item-container {
		--baseMargin: -38px;
		display: inline-block;
		position: relative;
		top: 50%;
		translate: 0 -50%;
		width: calc(200px * var(--scale));
		height: calc(200px * var(--scale));
		margin-left: calc(var(--baseMargin) * var(--scale));
		margin-right: calc(var(--baseMargin) * var(--scale));
		z-index: 1;
		pointer-events: none;
		&:hover {
			z-index: 2;
			.hex-menu-item:not(.empty) {
				.hex {
					fill: var(--hover-color);
				}
			}
		}
		&.rotated {
			--baseMargin: -46px;
			&:nth-child(2n) {
				top: calc(50% + 125px / 2 * var(--scale));
			}
		}
		.hex-menu-item {
			width: 100%;
			height: 100%;
			pointer-events: none;
			&.active,
			&.empty {
				cursor: default;
			}
			&.empty {
				.hex {
					fill: transparent;
					pointer-events: none;
				}
			}
			&.active {
				.hex {
					fill: var(--hover-color);
				}
			}
			.hex {
				fill: var(--item-color);
				z-index: -1;
				backface-visibility: hidden;
				transition:
					fill 500ms ease,
					-webkit-transform 1s ease-in-out;
				pointer-events: auto;
				&:hover {
					fill: var(--hover-color);
				}
			}
		}
		.label {
			color: var(--label-color);
			text-shadow: 0 0 3px rgba(0, 0, 0, 0.5);
			font-family: sans-serif;
			white-space: nowrap;
			font-size: 1.2em;
			font-weight: 600;
			letter-spacing: 1px;
			position: absolute;
			top: 50%;
			left: 50%;
			translate: -50% -50%;
		}
	}

	.bounce:hover:not(.active):not(.empty) {
		animation: bounce 500ms ease-in-out forwards;
		stroke: var(--bg-color);
		stroke-width: 0;
		.backface {
			box-shadow: none;
		}
	}
	@keyframes bounce {
		40% {
			scale: 1.2;
			stroke-width: 2;
		}
		60% {
			scale: 1;
		}
		80% {
			scale: 1.05;
			stroke-width: 2;
		}
		100% {
			scale: 1;
		}
	}
</style>
