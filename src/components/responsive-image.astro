---
import type { ImageOutputFormat } from "astro";
import { getImage, type ImgAttributes } from "astro:assets";

type Props = Omit<ImgAttributes, "sizes"> & {
	src: ImageMetadata;
	format?: ImageOutputFormat;
	sizes: number[];
	media?: string[];
};

async function generateResponsiveImage({ src, format, sizes }: Pick<Props, "src" | "format" | "sizes">) {
	const imgSrcSet = await Promise.allSettled(
		sizes.map(async (size) => {
			const image = await getImage({ src, width: size, format });
			return { src: `${image.src} ${size * 2}w`, size };
		})
	);

	const srcSet = imgSrcSet.map((result) => (result.status === "fulfilled" ? result.value.src : "")).filter(Boolean);
	const imgSrc = await getImage({ src, width: Math.min(...sizes), format });

	return {
		srcSet,
		imgSrc
	};
}

const { src, sizes, format, alt, id, media } = Astro.props;
const className = Astro.props.class;

const { srcSet, imgSrc } = await generateResponsiveImage({ src, sizes, format });
---

<img srcset={srcSet.join(", ")} sizes={media?.join(", ")} {id} {alt} src={imgSrc.src} class={className} loading="lazy" />
