---
import type { ImageOutputFormat } from "astro";
import { getImage } from "astro:assets";

type Props = {
	src: ImageMetadata;
	id?: string;
	alt: string;
	format?: ImageOutputFormat;
	sizes: number[];
	class: string;
};

async function generateResponsiveImage({ src, format, sizes }: Omit<Props, "alt" | "class">) {
	const imgSrcSet = sizes.map(async (size) => {
		const image = await getImage({ src, width: size, format });
		return `${image.src} ${size}w`;
	});

	const imgSrc = await getImage({ src, width: Math.max(...sizes), format });

	return {
		srcSet: await Promise.all(imgSrcSet),
		imgSrc: imgSrc.src
	};
}

const { src, sizes, format, alt, id } = Astro.props;
const className = Astro.props.class;

const { srcSet, imgSrc } = await generateResponsiveImage({
	src,
	sizes,
	format
});
---

<img srcset={srcSet.join(", ")} {id} {alt} src={imgSrc} class={className} loading="lazy" />
