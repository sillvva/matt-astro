---
import { cn } from "$/util";
import type { ImageOutputFormat } from "astro";
import { getImage, type ImgAttributes } from "astro:assets";

type Unit = "px" | "em" | "rem";
type Size = `${number}${Unit}`;
type MinMediaQuery = `(min-width: ${Size})`;
type MaxMediaQuery = `(max-width: ${Size})`;
type MinMaxMediaQuery =
	| MinMediaQuery
	| MaxMediaQuery
	| `(${MinMediaQuery} and ${MaxMediaQuery})`
	| `(${MaxMediaQuery} or ${MinMediaQuery})`;
type OrientationMediaQuery = "(orientation: portrait)" | "(orientation: landscape)";
type OMMMediaQuery = `${OrientationMediaQuery} and ${MinMaxMediaQuery}`;
type ColorSchemeMediaQuery = "(prefers-color-scheme: dark)" | "(prefers-color-scheme: light)";
type CMMMediaQuery = `${ColorSchemeMediaQuery} and ${MinMaxMediaQuery}`;

type Props = ImgAttributes & {
	src: ImageMetadata;
	pictureClass?: string | string[];
	include2x?: boolean;
	include3x?: boolean;
	srcSet: {
		src?: ImageMetadata;
		media: MinMaxMediaQuery | OrientationMediaQuery | ColorSchemeMediaQuery | OMMMediaQuery | CMMMediaQuery;
		size: number;
		format?: ImageOutputFormat;
	}[];
};

const { src, pictureClass, include2x, include3x, ...rest } = Astro.props;
const className = Astro.props.class;
const loading = Astro.props.loading || "lazy";

const srcSet = (
	await Promise.all(
		Astro.props.srcSet.map(async ({ media, size, format, ...img }) => {
			const url = src || img.src;
			const images: string[] = [];

			const image = await getImage({ src: url, width: size, format });
			images.push(`${image.src}`);

			if (include2x) {
				const image2x = await getImage({ src: url, width: size * 2, format });
				images.push(`${image2x.src} 2x`);
			}

			if (include3x) {
				const image3x = await getImage({ src: url, width: size * 3, format });
				images.push(`${image3x.src} 3x`);
			}

			return {
				src: images.join(", "),
				media,
				type: format && `image/${format}`,
				size
			};
		})
	)
).sort((a, b) => a.size - b.size);

const maxSize = srcSet.reduce((acc, curr) => (curr.size > acc ? curr.size : acc), 0);
const imgSrc = srcSet.find((ss) => ss.size === maxSize);
if (!imgSrc) throw new Error("No image source found");
---

<picture class={cn("h-full w-full", pictureClass)}>
	{srcSet.map((ss) => <source srcset={ss.src} media={ss.media} type={ss.type} />)}
	<img src={imgSrc.src.split(", ")[0]} loading={loading} class={className} {...rest} />
</picture>
