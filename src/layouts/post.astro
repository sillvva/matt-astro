---
import type { Props as HeadProps } from "$/components/head.astro";
import ResponsiveImage from "$/components/responsive-image.astro";
import { cn, formatDate, slugify, sorter } from "$/util";
import PortfolioLayout from "./portfolio.astro";
import CodePen from "$/components/markdown/codepen.astro";
import type { CollectionEntry } from "astro:content";

interface Props extends HeadProps {
	data: CollectionEntry<"blog">["data"];
	slug: CollectionEntry<"blog">["slug"];
}
const {
	slug,
	data: { title, description, image, codepen, date, updated, tags }
} = Astro.props;

const youTubeId = typeof image === "string" && image.match(/v=([^&]+)/)?.[1];
---

<PortfolioLayout
	{title}
	{description}
	image={typeof image === "string" ? image : image.src}
	articleMeta={{
		published_date: date.toISOString(),
		...(updated && { modified_date: updated.toISOString() })
	}}
	isPost
	backTo={{
		href: "/blog",
		text: "Blog"
	}}
	noBg
>
	<div class="post mx-auto flex min-w-0 justify-center gap-8">
		<article class="min-w-0 max-w-screen-md flex-1 2xl:mx-0">
			<section class="mb-8 flex flex-col gap-2 md:gap-4" transition:name={slugify(`image ${slug}`)}>
				<p
					class={cn(
						"flex text-sm text-theme-faded md:text-left",
						updated ? "justify-between md:justify-normal gap-8" : "justify-center"
					)}
					aria-label="Date published"
				>
					<span class="underline decoration-dotted underline-offset-2">{formatDate(date)}</span>
					{
						updated && (
							<span class="inline 2xs:inline">
								Updated: <span class="underline decoration-dotted underline-offset-2">{formatDate(updated)}</span>
							</span>
						)
					}
				</p>
				{
					codepen ? (
						<CodePen {...codepen} />
					) : youTubeId ? (
						<iframe src={`https://www.youtube.com/embed/${youTubeId}`} class="aspect-video w-full border-0" allowfullscreen />
					) : typeof image === "string" ? (
						<img
							src={image}
							alt={title}
							id="post-image"
							class="h-full w-full object-cover object-center shadow shadow-black/50"
						/>
					) : (
						<div class="relative aspect-video">
							<ResponsiveImage
								src={image}
								alt={title}
								id="post-image"
								srcSet={[
									{ media: "(max-width: 500px)", size: 500 },
									{ media: "(max-width: 700px)", size: 700 },
									{ media: "(min-width: 701px)", size: 900 }
								]}
								class="h-full w-full object-cover object-center shadow shadow-black/50"
							/>
						</div>
					)
				}
				{
					tags.length && (
						<nav class="flex gap-4">
							<h2 class="text-xl max-sm:hidden">Tags</h2>
							<ul class="flex flex-1 flex-wrap justify-center gap-2 sm:justify-end">
								{tags
									.sort((a, b) => sorter(a, b))
									.map((tag) => (
										<li>
											<a href={`/blog/${slugify(tag)}`} class="btn btn-sm uppercase">
												{tag}
											</a>
										</li>
									))}
							</ul>
						</nav>
					)
				}
			</section>
			<section class="post-body prose prose-slate w-full max-w-3xl">
				<slot />
			</section>
		</article>

		<slot name="toc" />
	</div>

	<button id="to-top" class="btn btn-primary fixed bottom-4 right-4 z-20 hidden aspect-square h-14 w-14 rounded-full p-2">
		<svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24">
			<path fill="currentColor" d="M14 20h-4v-9l-3.5 3.5l-2.42-2.42L12 4.16l7.92 7.92l-2.42 2.42L14 11v9Z"></path>
		</svg>
	</button>
</PortfolioLayout>

<script>
	const btnScrollToTop = document.querySelector("#to-top");
	const postImage = document.querySelector("#post-image");

	const observer = new IntersectionObserver(
		(entries) => {
			entries.forEach((entry) => {
				if (!entry.isIntersecting) {
					btnScrollToTop?.classList.add("flex");
					btnScrollToTop?.classList.remove("hidden");
				} else {
					btnScrollToTop?.classList.add("hidden");
					btnScrollToTop?.classList.remove("flex");
				}
			});
		},
		{
			threshold: 0
		}
	);

	if (postImage) observer.observe(postImage);

	btnScrollToTop?.addEventListener("click", () => {
		window.scrollTo({
			top: 0,
			behavior: "smooth"
		});
	});
</script>

<style lang="scss" is:global>
	#app .post-body #table-of-contents {
		@apply xl:hidden;
		+ ul {
			@apply xl:hidden;
		}
	}

	#app .post-body #table-of-contents + ul li {
		@apply flex flex-col gap-2;
	}

	#app .post-body #table-of-contents ~ :not(#table-of-contents):not(ul):not(li) + ul {
		@apply mb-6;
	}

	.astro-code {
		margin-bottom: 1.5rem;
		padding: 1rem;
		border-bottom-left-radius: 0.5rem;
		border-bottom-right-radius: 0.5rem;
		max-height: 20rem;
		overflow-y: auto;
		font-size: 0.875rem;
		line-height: 1.25rem;
		background-color: rgb(23 23 23 / 1) !important;
	}

	@media (min-width: 768px) {
		.astro-code {
			max-height: 40rem;
		}
	}
</style>
