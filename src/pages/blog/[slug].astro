---
import { all } from "$/components/markdown/all.astro";
import PostLayout from "$/layouts/post.astro";
import { cn } from "$/util";
import type { GetStaticPaths, InferGetStaticPropsType } from "astro";
import { getCollection, getEntry } from "astro:content";

export const getStaticPaths = (async () => {
	const posts = await getCollection("blog");

	return posts.map((post) => ({
		params: {
			slug: post.slug
		},
		props: {
			post
		}
	}));
}) satisfies GetStaticPaths;

type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const { slug, data } = Astro.props.post;
const entry = await getEntry("blog", slug);

if (!entry) {
	return {
		status: 404
	};
}

const { Content, headings } = await entry.render();

const items = headings.filter((item) => item.slug !== "table-of-contents").filter((item) => item.depth <= 3);
const hasToc = items.length >= 2;
const baseLevel = headings[0]?.depth ?? 1;
---

<PostLayout title={data.title} {slug} {data}>
	<Content components={all} />
	{
		hasToc && (
			<aside slot="toc" class="relative hidden min-w-fit border-l border-dotted border-base-content/50 pl-4 2xl:block">
				<div class="sticky top-4 max-h-screen overflow-auto">
					<h2 class="mb-2 text-xl font-bold">Table of Contents</h2>
					<ul class="flex max-w-[220px] flex-col gap-2">
						{items
							.filter(({ depth }) => depth - 2 < 2)
							.map(({ slug, depth, text }) => (
								<li
									class={cn(depth > baseLevel && "text-sm", depth == baseLevel + 1 && "pl-4", depth == baseLevel + 2 && "pl-8")}
								>
									<a href={`#${slug}`} class="text-primary">
										{text}
									</a>
								</li>
							))}
					</ul>
				</div>
			</aside>
		)
	}
</PostLayout>

<style>
	:global(p:has(> img)) {
		@apply !mb-6 mt-6 flex flex-col;
	}
	:global(p:has(> img) > img) {
		@apply relative mx-auto mb-2 flex w-full max-w-[800px] justify-center;
	}
</style>
